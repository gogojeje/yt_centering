#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist

class ControlStop():
    def __init__(self):
        self.pub_stop_detected = rospy.Publisher('/control/stop_detected', Float64, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
        self.sub_stop_signal = rospy.Subscriber('/detect/stop_signal', Float64, self.cbStopSignal, queue_size=1)

        self.stop_sign_detected = False

        rospy.on_shutdown(self.fnShutDown)

    def cbStopSignal(self, stop_signal_msg):
        rospy.loginfo(f"Received stop signal: {stop_signal_msg.data}")
        if stop_signal_msg.data == 1.0:
            if not self.stop_sign_detected:
                self.stop_sign_detected = True
                self.publish_zero_velocity()
                self.pub_stop_detected.publish(Float64(1.0))
                rospy.loginfo("Publishing stop detected signal.")
            else:
                rospy.loginfo("Stop sign already detected.")
        else:
            if self.stop_sign_detected:
                self.stop_sign_detected = False
                self.pub_stop_detected.publish(Float64(0.0))
                rospy.loginfo("Publishing resume movement signal.")

    def publish_zero_velocity(self):
        twist = Twist()
        twist.linear.x = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)
        rospy.loginfo("Published zero velocity command.")

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")
        self.publish_zero_velocity()

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_stop')
    node = ControlStop()
    node.main()

